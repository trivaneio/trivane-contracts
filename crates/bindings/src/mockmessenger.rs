/**

Generated by the following Solidity interface...
```solidity
interface MockMessenger {
    struct Identifier {
        address origin;
        uint256 blockNumber;
        uint256 logIndex;
        uint256 timestamp;
        uint256 chainId;
    }

    error EventPayloadNotSentMessage();
    error IdOriginNotL2ToL2CrossDomainMessenger();
    error InvalidChainId();
    error MessageAlreadyRelayed();
    error MessageDestinationNotRelayChain();
    error MessageDestinationSameChain();
    error MessageTargetCrossL2Inbox();
    error MessageTargetL2ToL2CrossDomainMessenger();
    error NotEntered();
    error ReentrantCall();
    error TargetCallFailed();

    event RelayedMessage(uint256 indexed source, uint256 indexed messageNonce, bytes32 indexed messageHash);
    event SentMessage(uint256 indexed destination, address indexed target, uint256 indexed messageNonce, address sender, bytes message);

    function __constructor__() external;
    function crossDomainMessageContext() external view returns (address sender_, uint256 source_);
    function crossDomainMessageSender() external view returns (address);
    function crossDomainMessageSource() external view returns (uint256 source_);
    function messageNonce() external view returns (uint256);
    function messageVersion() external view returns (uint16);
    function relayMessage(Identifier memory _id, bytes memory _sentMessage) external payable returns (bytes memory);
    function sendMessage(uint256 _targetChainId, address _target, bytes memory _message) external returns (bytes32);
    function setCrossDomainMessageSender(address sender) external;
    function successfulMessages(bytes32 msgHash) external view returns (bool);
    function version() external pure returns (string memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "__constructor__",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "crossDomainMessageContext",
    "inputs": [],
    "outputs": [
      {
        "name": "sender_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "source_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "crossDomainMessageSender",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "crossDomainMessageSource",
    "inputs": [],
    "outputs": [
      {
        "name": "source_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "messageNonce",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "messageVersion",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint16",
        "internalType": "uint16"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "relayMessage",
    "inputs": [
      {
        "name": "_id",
        "type": "tuple",
        "internalType": "struct Identifier",
        "components": [
          {
            "name": "origin",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "blockNumber",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "logIndex",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "timestamp",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "chainId",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "_sentMessage",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "sendMessage",
    "inputs": [
      {
        "name": "_targetChainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "_target",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_message",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setCrossDomainMessageSender",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "successfulMessages",
    "inputs": [
      {
        "name": "msgHash",
        "type": "bytes32",
        "internalType": "bytes32"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "version",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "event",
    "name": "RelayedMessage",
    "inputs": [
      {
        "name": "source",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "messageNonce",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "messageHash",
        "type": "bytes32",
        "indexed": true,
        "internalType": "bytes32"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SentMessage",
    "inputs": [
      {
        "name": "destination",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "target",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "messageNonce",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "sender",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      },
      {
        "name": "message",
        "type": "bytes",
        "indexed": false,
        "internalType": "bytes"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "EventPayloadNotSentMessage",
    "inputs": []
  },
  {
    "type": "error",
    "name": "IdOriginNotL2ToL2CrossDomainMessenger",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidChainId",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MessageAlreadyRelayed",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MessageDestinationNotRelayChain",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MessageDestinationSameChain",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MessageTargetCrossL2Inbox",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MessageTargetL2ToL2CrossDomainMessenger",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotEntered",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ReentrantCall",
    "inputs": []
  },
  {
    "type": "error",
    "name": "TargetCallFailed",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod MockMessenger {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50610b408061001c5f395ff3fe60806040526004361061009b575f3560e01c80637056f41f116100635780637056f41f1461015d5780637936cbee146101995780638d1d298f146101c457806398c36301146101f4578063b1b1b2091461021c578063ecc70428146102585761009b565b80631c0082a31461009f57806324794462146100b557806338ffde18146100df57806352617f3c1461010957806354fd4d5014610133575b5f5ffd5b3480156100aa575f5ffd5b506100b3610282565b005b3480156100c0575f5ffd5b506100c9610284565b6040516100d691906104d2565b60405180910390f35b3480156100ea575f5ffd5b506100f361028c565b604051610100919061052a565b60405180910390f35b348015610114575f5ffd5b5061011d6102b0565b60405161012a919061055f565b60405180910390f35b34801561013e575f5ffd5b506101476102b8565b60405161015491906105e8565b60405180910390f35b348015610168575f5ffd5b50610183600480360381019061017e91906106c5565b6102f5565b604051610190919061074e565b60405180910390f35b3480156101a4575f5ffd5b506101ad6103c4565b6040516101bb929190610767565b60405180910390f35b6101de60048036038101906101d991906107b0565b6103f1565b6040516101eb919061085f565b60405180910390f35b3480156101ff575f5ffd5b5061021a6004803603810190610215919061087f565b610449565b005b348015610227575f5ffd5b50610242600480360381019061023d91906108d4565b61048b565b60405161024f9190610919565b60405180910390f35b348015610263575f5ffd5b5061026c6104b1565b60405161027991906104d2565b60405180910390f35b565b5f6001905090565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f6001905090565b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b5f5f8585858560405160200161030e94939291906109d3565b604051602081830303815290604052805190602001209050600160025f8381526020019081526020015f205f6101000a81548160ff02191690831515021790555060015f81548092919061036190610a3a565b919050558573ffffffffffffffffffffffffffffffffffffffff16877f382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f3203388886040516103b093929190610aad565b60405180910390a480915050949350505050565b5f5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001915091509091565b60605f67ffffffffffffffff81111561040d5761040c610add565b5b6040519080825280601f01601f19166020018201604052801561043f5781602001600182028036833780820191505090505b5090509392505050565b805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60025f8381526020019081526020015f205f9054906101000a900460ff169050919050565b5f600154905090565b5f819050919050565b6104cc816104ba565b82525050565b5f6020820190506104e55f8301846104c3565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610514826104eb565b9050919050565b6105248161050a565b82525050565b5f60208201905061053d5f83018461051b565b92915050565b5f61ffff82169050919050565b61055981610543565b82525050565b5f6020820190506105725f830184610550565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6105ba82610578565b6105c48185610582565b93506105d4818560208601610592565b6105dd816105a0565b840191505092915050565b5f6020820190508181035f83015261060081846105b0565b905092915050565b5f5ffd5b5f5ffd5b610619816104ba565b8114610623575f5ffd5b50565b5f8135905061063481610610565b92915050565b6106438161050a565b811461064d575f5ffd5b50565b5f8135905061065e8161063a565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261068557610684610664565b5b8235905067ffffffffffffffff8111156106a2576106a1610668565b5b6020830191508360018202830111156106be576106bd61066c565b5b9250929050565b5f5f5f5f606085870312156106dd576106dc610608565b5b5f6106ea87828801610626565b94505060206106fb87828801610650565b935050604085013567ffffffffffffffff81111561071c5761071b61060c565b5b61072887828801610670565b925092505092959194509250565b5f819050919050565b61074881610736565b82525050565b5f6020820190506107615f83018461073f565b92915050565b5f60408201905061077a5f83018561051b565b61078760208301846104c3565b9392505050565b5f5ffd5b5f60a082840312156107a7576107a661078e565b5b81905092915050565b5f5f5f60c084860312156107c7576107c6610608565b5b5f6107d486828701610792565b93505060a084013567ffffffffffffffff8111156107f5576107f461060c565b5b61080186828701610670565b92509250509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f6108318261080d565b61083b8185610817565b935061084b818560208601610592565b610854816105a0565b840191505092915050565b5f6020820190508181035f8301526108778184610827565b905092915050565b5f6020828403121561089457610893610608565b5b5f6108a184828501610650565b91505092915050565b6108b381610736565b81146108bd575f5ffd5b50565b5f813590506108ce816108aa565b92915050565b5f602082840312156108e9576108e8610608565b5b5f6108f6848285016108c0565b91505092915050565b5f8115159050919050565b610913816108ff565b82525050565b5f60208201905061092c5f83018461090a565b92915050565b5f819050919050565b61094c610947826104ba565b610932565b82525050565b5f8160601b9050919050565b5f61096882610952565b9050919050565b5f6109798261095e565b9050919050565b61099161098c8261050a565b61096f565b82525050565b5f81905092915050565b828183375f83830152505050565b5f6109ba8385610997565b93506109c78385846109a1565b82840190509392505050565b5f6109de828761093b565b6020820191506109ee8286610980565b6014820191506109ff8284866109af565b915081905095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a44826104ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a7657610a75610a0d565b5b600182019050919050565b5f610a8c8385610817565b9350610a998385846109a1565b610aa2836105a0565b840190509392505050565b5f604082019050610ac05f83018661051b565b8181036020830152610ad3818486610a81565b9050949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffdfea2646970667358221220a0054f3b6e0f475ecce32c8d2ce7fc0526b7a2a4e58798002953c4080cf3edd764736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x0B@\x80a\0\x1C_9_\xF3\xFE`\x80`@R`\x046\x10a\0\x9BW_5`\xE0\x1C\x80cpV\xF4\x1F\x11a\0cW\x80cpV\xF4\x1F\x14a\x01]W\x80cy6\xCB\xEE\x14a\x01\x99W\x80c\x8D\x1D)\x8F\x14a\x01\xC4W\x80c\x98\xC3c\x01\x14a\x01\xF4W\x80c\xB1\xB1\xB2\t\x14a\x02\x1CW\x80c\xEC\xC7\x04(\x14a\x02XWa\0\x9BV[\x80c\x1C\0\x82\xA3\x14a\0\x9FW\x80c$yDb\x14a\0\xB5W\x80c8\xFF\xDE\x18\x14a\0\xDFW\x80cRa\x7F<\x14a\x01\tW\x80cT\xFDMP\x14a\x013W[__\xFD[4\x80\x15a\0\xAAW__\xFD[Pa\0\xB3a\x02\x82V[\0[4\x80\x15a\0\xC0W__\xFD[Pa\0\xC9a\x02\x84V[`@Qa\0\xD6\x91\x90a\x04\xD2V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xEAW__\xFD[Pa\0\xF3a\x02\x8CV[`@Qa\x01\0\x91\x90a\x05*V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x14W__\xFD[Pa\x01\x1Da\x02\xB0V[`@Qa\x01*\x91\x90a\x05_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01>W__\xFD[Pa\x01Ga\x02\xB8V[`@Qa\x01T\x91\x90a\x05\xE8V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01hW__\xFD[Pa\x01\x83`\x04\x806\x03\x81\x01\x90a\x01~\x91\x90a\x06\xC5V[a\x02\xF5V[`@Qa\x01\x90\x91\x90a\x07NV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA4W__\xFD[Pa\x01\xADa\x03\xC4V[`@Qa\x01\xBB\x92\x91\x90a\x07gV[`@Q\x80\x91\x03\x90\xF3[a\x01\xDE`\x04\x806\x03\x81\x01\x90a\x01\xD9\x91\x90a\x07\xB0V[a\x03\xF1V[`@Qa\x01\xEB\x91\x90a\x08_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xFFW__\xFD[Pa\x02\x1A`\x04\x806\x03\x81\x01\x90a\x02\x15\x91\x90a\x08\x7FV[a\x04IV[\0[4\x80\x15a\x02'W__\xFD[Pa\x02B`\x04\x806\x03\x81\x01\x90a\x02=\x91\x90a\x08\xD4V[a\x04\x8BV[`@Qa\x02O\x91\x90a\t\x19V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02cW__\xFD[Pa\x02la\x04\xB1V[`@Qa\x02y\x91\x90a\x04\xD2V[`@Q\x80\x91\x03\x90\xF3[V[_`\x01\x90P\x90V[__\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[_`\x01\x90P\x90V[```@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F1.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P\x90V[__\x85\x85\x85\x85`@Q` \x01a\x03\x0E\x94\x93\x92\x91\x90a\t\xD3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P`\x01`\x02_\x83\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP`\x01_\x81T\x80\x92\x91\x90a\x03a\x90a\n:V[\x91\x90PU\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x7F8$\t\xACi\0\x1E\x11\x93\x1A(CZ\xFE\xF4B\xCB\xFD \xD9\x89\x19\x07\xE8\xFA7;\xA7\xD3Q\xF3 3\x88\x88`@Qa\x03\xB0\x93\x92\x91\x90a\n\xADV[`@Q\x80\x91\x03\x90\xA4\x80\x91PP\x94\x93PPPPV[____\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01\x91P\x91P\x90\x91V[``_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\rWa\x04\x0Ca\n\xDDV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x04?W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x93\x92PPPV[\x80__a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[_`\x02_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x91\x90PV[_`\x01T\x90P\x90V[_\x81\x90P\x91\x90PV[a\x04\xCC\x81a\x04\xBAV[\x82RPPV[_` \x82\x01\x90Pa\x04\xE5_\x83\x01\x84a\x04\xC3V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x05\x14\x82a\x04\xEBV[\x90P\x91\x90PV[a\x05$\x81a\x05\nV[\x82RPPV[_` \x82\x01\x90Pa\x05=_\x83\x01\x84a\x05\x1BV[\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x05Y\x81a\x05CV[\x82RPPV[_` \x82\x01\x90Pa\x05r_\x83\x01\x84a\x05PV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x05\xBA\x82a\x05xV[a\x05\xC4\x81\x85a\x05\x82V[\x93Pa\x05\xD4\x81\x85` \x86\x01a\x05\x92V[a\x05\xDD\x81a\x05\xA0V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x06\0\x81\x84a\x05\xB0V[\x90P\x92\x91PPV[__\xFD[__\xFD[a\x06\x19\x81a\x04\xBAV[\x81\x14a\x06#W__\xFD[PV[_\x815\x90Pa\x064\x81a\x06\x10V[\x92\x91PPV[a\x06C\x81a\x05\nV[\x81\x14a\x06MW__\xFD[PV[_\x815\x90Pa\x06^\x81a\x06:V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x06\x85Wa\x06\x84a\x06dV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xA2Wa\x06\xA1a\x06hV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x06\xBEWa\x06\xBDa\x06lV[[\x92P\x92\x90PV[____``\x85\x87\x03\x12\x15a\x06\xDDWa\x06\xDCa\x06\x08V[[_a\x06\xEA\x87\x82\x88\x01a\x06&V[\x94PP` a\x06\xFB\x87\x82\x88\x01a\x06PV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x1CWa\x07\x1Ba\x06\x0CV[[a\x07(\x87\x82\x88\x01a\x06pV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[_\x81\x90P\x91\x90PV[a\x07H\x81a\x076V[\x82RPPV[_` \x82\x01\x90Pa\x07a_\x83\x01\x84a\x07?V[\x92\x91PPV[_`@\x82\x01\x90Pa\x07z_\x83\x01\x85a\x05\x1BV[a\x07\x87` \x83\x01\x84a\x04\xC3V[\x93\x92PPPV[__\xFD[_`\xA0\x82\x84\x03\x12\x15a\x07\xA7Wa\x07\xA6a\x07\x8EV[[\x81\x90P\x92\x91PPV[___`\xC0\x84\x86\x03\x12\x15a\x07\xC7Wa\x07\xC6a\x06\x08V[[_a\x07\xD4\x86\x82\x87\x01a\x07\x92V[\x93PP`\xA0\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xF5Wa\x07\xF4a\x06\x0CV[[a\x08\x01\x86\x82\x87\x01a\x06pV[\x92P\x92PP\x92P\x92P\x92V[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_a\x081\x82a\x08\rV[a\x08;\x81\x85a\x08\x17V[\x93Pa\x08K\x81\x85` \x86\x01a\x05\x92V[a\x08T\x81a\x05\xA0V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x08w\x81\x84a\x08'V[\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\x94Wa\x08\x93a\x06\x08V[[_a\x08\xA1\x84\x82\x85\x01a\x06PV[\x91PP\x92\x91PPV[a\x08\xB3\x81a\x076V[\x81\x14a\x08\xBDW__\xFD[PV[_\x815\x90Pa\x08\xCE\x81a\x08\xAAV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xE9Wa\x08\xE8a\x06\x08V[[_a\x08\xF6\x84\x82\x85\x01a\x08\xC0V[\x91PP\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\t\x13\x81a\x08\xFFV[\x82RPPV[_` \x82\x01\x90Pa\t,_\x83\x01\x84a\t\nV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\tLa\tG\x82a\x04\xBAV[a\t2V[\x82RPPV[_\x81``\x1B\x90P\x91\x90PV[_a\th\x82a\tRV[\x90P\x91\x90PV[_a\ty\x82a\t^V[\x90P\x91\x90PV[a\t\x91a\t\x8C\x82a\x05\nV[a\toV[\x82RPPV[_\x81\x90P\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\t\xBA\x83\x85a\t\x97V[\x93Pa\t\xC7\x83\x85\x84a\t\xA1V[\x82\x84\x01\x90P\x93\x92PPPV[_a\t\xDE\x82\x87a\t;V[` \x82\x01\x91Pa\t\xEE\x82\x86a\t\x80V[`\x14\x82\x01\x91Pa\t\xFF\x82\x84\x86a\t\xAFV[\x91P\x81\x90P\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\nD\x82a\x04\xBAV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\nvWa\nua\n\rV[[`\x01\x82\x01\x90P\x91\x90PV[_a\n\x8C\x83\x85a\x08\x17V[\x93Pa\n\x99\x83\x85\x84a\t\xA1V[a\n\xA2\x83a\x05\xA0V[\x84\x01\x90P\x93\x92PPPV[_`@\x82\x01\x90Pa\n\xC0_\x83\x01\x86a\x05\x1BV[\x81\x81\x03` \x83\x01Ra\n\xD3\x81\x84\x86a\n\x81V[\x90P\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xA0\x05O;n\x0FG^\xCC\xE3,\x8D,\xE7\xFC\x05&\xB7\xA2\xA4\xE5\x87\x98\0)S\xC4\x08\x0C\xF3\xED\xD7dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061009b575f3560e01c80637056f41f116100635780637056f41f1461015d5780637936cbee146101995780638d1d298f146101c457806398c36301146101f4578063b1b1b2091461021c578063ecc70428146102585761009b565b80631c0082a31461009f57806324794462146100b557806338ffde18146100df57806352617f3c1461010957806354fd4d5014610133575b5f5ffd5b3480156100aa575f5ffd5b506100b3610282565b005b3480156100c0575f5ffd5b506100c9610284565b6040516100d691906104d2565b60405180910390f35b3480156100ea575f5ffd5b506100f361028c565b604051610100919061052a565b60405180910390f35b348015610114575f5ffd5b5061011d6102b0565b60405161012a919061055f565b60405180910390f35b34801561013e575f5ffd5b506101476102b8565b60405161015491906105e8565b60405180910390f35b348015610168575f5ffd5b50610183600480360381019061017e91906106c5565b6102f5565b604051610190919061074e565b60405180910390f35b3480156101a4575f5ffd5b506101ad6103c4565b6040516101bb929190610767565b60405180910390f35b6101de60048036038101906101d991906107b0565b6103f1565b6040516101eb919061085f565b60405180910390f35b3480156101ff575f5ffd5b5061021a6004803603810190610215919061087f565b610449565b005b348015610227575f5ffd5b50610242600480360381019061023d91906108d4565b61048b565b60405161024f9190610919565b60405180910390f35b348015610263575f5ffd5b5061026c6104b1565b60405161027991906104d2565b60405180910390f35b565b5f6001905090565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f6001905090565b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b5f5f8585858560405160200161030e94939291906109d3565b604051602081830303815290604052805190602001209050600160025f8381526020019081526020015f205f6101000a81548160ff02191690831515021790555060015f81548092919061036190610a3a565b919050558573ffffffffffffffffffffffffffffffffffffffff16877f382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f3203388886040516103b093929190610aad565b60405180910390a480915050949350505050565b5f5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001915091509091565b60605f67ffffffffffffffff81111561040d5761040c610add565b5b6040519080825280601f01601f19166020018201604052801561043f5781602001600182028036833780820191505090505b5090509392505050565b805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f60025f8381526020019081526020015f205f9054906101000a900460ff169050919050565b5f600154905090565b5f819050919050565b6104cc816104ba565b82525050565b5f6020820190506104e55f8301846104c3565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610514826104eb565b9050919050565b6105248161050a565b82525050565b5f60208201905061053d5f83018461051b565b92915050565b5f61ffff82169050919050565b61055981610543565b82525050565b5f6020820190506105725f830184610550565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6105ba82610578565b6105c48185610582565b93506105d4818560208601610592565b6105dd816105a0565b840191505092915050565b5f6020820190508181035f83015261060081846105b0565b905092915050565b5f5ffd5b5f5ffd5b610619816104ba565b8114610623575f5ffd5b50565b5f8135905061063481610610565b92915050565b6106438161050a565b811461064d575f5ffd5b50565b5f8135905061065e8161063a565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261068557610684610664565b5b8235905067ffffffffffffffff8111156106a2576106a1610668565b5b6020830191508360018202830111156106be576106bd61066c565b5b9250929050565b5f5f5f5f606085870312156106dd576106dc610608565b5b5f6106ea87828801610626565b94505060206106fb87828801610650565b935050604085013567ffffffffffffffff81111561071c5761071b61060c565b5b61072887828801610670565b925092505092959194509250565b5f819050919050565b61074881610736565b82525050565b5f6020820190506107615f83018461073f565b92915050565b5f60408201905061077a5f83018561051b565b61078760208301846104c3565b9392505050565b5f5ffd5b5f60a082840312156107a7576107a661078e565b5b81905092915050565b5f5f5f60c084860312156107c7576107c6610608565b5b5f6107d486828701610792565b93505060a084013567ffffffffffffffff8111156107f5576107f461060c565b5b61080186828701610670565b92509250509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f6108318261080d565b61083b8185610817565b935061084b818560208601610592565b610854816105a0565b840191505092915050565b5f6020820190508181035f8301526108778184610827565b905092915050565b5f6020828403121561089457610893610608565b5b5f6108a184828501610650565b91505092915050565b6108b381610736565b81146108bd575f5ffd5b50565b5f813590506108ce816108aa565b92915050565b5f602082840312156108e9576108e8610608565b5b5f6108f6848285016108c0565b91505092915050565b5f8115159050919050565b610913816108ff565b82525050565b5f60208201905061092c5f83018461090a565b92915050565b5f819050919050565b61094c610947826104ba565b610932565b82525050565b5f8160601b9050919050565b5f61096882610952565b9050919050565b5f6109798261095e565b9050919050565b61099161098c8261050a565b61096f565b82525050565b5f81905092915050565b828183375f83830152505050565b5f6109ba8385610997565b93506109c78385846109a1565b82840190509392505050565b5f6109de828761093b565b6020820191506109ee8286610980565b6014820191506109ff8284866109af565b915081905095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a44826104ba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a7657610a75610a0d565b5b600182019050919050565b5f610a8c8385610817565b9350610a998385846109a1565b610aa2836105a0565b840190509392505050565b5f604082019050610ac05f83018661051b565b8181036020830152610ad3818486610a81565b9050949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffdfea2646970667358221220a0054f3b6e0f475ecce32c8d2ce7fc0526b7a2a4e58798002953c4080cf3edd764736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\x9BW_5`\xE0\x1C\x80cpV\xF4\x1F\x11a\0cW\x80cpV\xF4\x1F\x14a\x01]W\x80cy6\xCB\xEE\x14a\x01\x99W\x80c\x8D\x1D)\x8F\x14a\x01\xC4W\x80c\x98\xC3c\x01\x14a\x01\xF4W\x80c\xB1\xB1\xB2\t\x14a\x02\x1CW\x80c\xEC\xC7\x04(\x14a\x02XWa\0\x9BV[\x80c\x1C\0\x82\xA3\x14a\0\x9FW\x80c$yDb\x14a\0\xB5W\x80c8\xFF\xDE\x18\x14a\0\xDFW\x80cRa\x7F<\x14a\x01\tW\x80cT\xFDMP\x14a\x013W[__\xFD[4\x80\x15a\0\xAAW__\xFD[Pa\0\xB3a\x02\x82V[\0[4\x80\x15a\0\xC0W__\xFD[Pa\0\xC9a\x02\x84V[`@Qa\0\xD6\x91\x90a\x04\xD2V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\0\xEAW__\xFD[Pa\0\xF3a\x02\x8CV[`@Qa\x01\0\x91\x90a\x05*V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x14W__\xFD[Pa\x01\x1Da\x02\xB0V[`@Qa\x01*\x91\x90a\x05_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01>W__\xFD[Pa\x01Ga\x02\xB8V[`@Qa\x01T\x91\x90a\x05\xE8V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01hW__\xFD[Pa\x01\x83`\x04\x806\x03\x81\x01\x90a\x01~\x91\x90a\x06\xC5V[a\x02\xF5V[`@Qa\x01\x90\x91\x90a\x07NV[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xA4W__\xFD[Pa\x01\xADa\x03\xC4V[`@Qa\x01\xBB\x92\x91\x90a\x07gV[`@Q\x80\x91\x03\x90\xF3[a\x01\xDE`\x04\x806\x03\x81\x01\x90a\x01\xD9\x91\x90a\x07\xB0V[a\x03\xF1V[`@Qa\x01\xEB\x91\x90a\x08_V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xFFW__\xFD[Pa\x02\x1A`\x04\x806\x03\x81\x01\x90a\x02\x15\x91\x90a\x08\x7FV[a\x04IV[\0[4\x80\x15a\x02'W__\xFD[Pa\x02B`\x04\x806\x03\x81\x01\x90a\x02=\x91\x90a\x08\xD4V[a\x04\x8BV[`@Qa\x02O\x91\x90a\t\x19V[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x02cW__\xFD[Pa\x02la\x04\xB1V[`@Qa\x02y\x91\x90a\x04\xD2V[`@Q\x80\x91\x03\x90\xF3[V[_`\x01\x90P\x90V[__\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[_`\x01\x90P\x90V[```@Q\x80`@\x01`@R\x80`\x05\x81R` \x01\x7F1.0.0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x90P\x90V[__\x85\x85\x85\x85`@Q` \x01a\x03\x0E\x94\x93\x92\x91\x90a\t\xD3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P`\x01`\x02_\x83\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP`\x01_\x81T\x80\x92\x91\x90a\x03a\x90a\n:V[\x91\x90PU\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87\x7F8$\t\xACi\0\x1E\x11\x93\x1A(CZ\xFE\xF4B\xCB\xFD \xD9\x89\x19\x07\xE8\xFA7;\xA7\xD3Q\xF3 3\x88\x88`@Qa\x03\xB0\x93\x92\x91\x90a\n\xADV[`@Q\x80\x91\x03\x90\xA4\x80\x91PP\x94\x93PPPPV[____\x90T\x90a\x01\0\n\x90\x04s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x01\x91P\x91P\x90\x91V[``_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\rWa\x04\x0Ca\n\xDDV[[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x04?W\x81` \x01`\x01\x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P\x93\x92PPPV[\x80__a\x01\0\n\x81T\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPPV[_`\x02_\x83\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04`\xFF\x16\x90P\x91\x90PV[_`\x01T\x90P\x90V[_\x81\x90P\x91\x90PV[a\x04\xCC\x81a\x04\xBAV[\x82RPPV[_` \x82\x01\x90Pa\x04\xE5_\x83\x01\x84a\x04\xC3V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x05\x14\x82a\x04\xEBV[\x90P\x91\x90PV[a\x05$\x81a\x05\nV[\x82RPPV[_` \x82\x01\x90Pa\x05=_\x83\x01\x84a\x05\x1BV[\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x05Y\x81a\x05CV[\x82RPPV[_` \x82\x01\x90Pa\x05r_\x83\x01\x84a\x05PV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[_a\x05\xBA\x82a\x05xV[a\x05\xC4\x81\x85a\x05\x82V[\x93Pa\x05\xD4\x81\x85` \x86\x01a\x05\x92V[a\x05\xDD\x81a\x05\xA0V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x06\0\x81\x84a\x05\xB0V[\x90P\x92\x91PPV[__\xFD[__\xFD[a\x06\x19\x81a\x04\xBAV[\x81\x14a\x06#W__\xFD[PV[_\x815\x90Pa\x064\x81a\x06\x10V[\x92\x91PPV[a\x06C\x81a\x05\nV[\x81\x14a\x06MW__\xFD[PV[_\x815\x90Pa\x06^\x81a\x06:V[\x92\x91PPV[__\xFD[__\xFD[__\xFD[__\x83`\x1F\x84\x01\x12a\x06\x85Wa\x06\x84a\x06dV[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xA2Wa\x06\xA1a\x06hV[[` \x83\x01\x91P\x83`\x01\x82\x02\x83\x01\x11\x15a\x06\xBEWa\x06\xBDa\x06lV[[\x92P\x92\x90PV[____``\x85\x87\x03\x12\x15a\x06\xDDWa\x06\xDCa\x06\x08V[[_a\x06\xEA\x87\x82\x88\x01a\x06&V[\x94PP` a\x06\xFB\x87\x82\x88\x01a\x06PV[\x93PP`@\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x1CWa\x07\x1Ba\x06\x0CV[[a\x07(\x87\x82\x88\x01a\x06pV[\x92P\x92PP\x92\x95\x91\x94P\x92PV[_\x81\x90P\x91\x90PV[a\x07H\x81a\x076V[\x82RPPV[_` \x82\x01\x90Pa\x07a_\x83\x01\x84a\x07?V[\x92\x91PPV[_`@\x82\x01\x90Pa\x07z_\x83\x01\x85a\x05\x1BV[a\x07\x87` \x83\x01\x84a\x04\xC3V[\x93\x92PPPV[__\xFD[_`\xA0\x82\x84\x03\x12\x15a\x07\xA7Wa\x07\xA6a\x07\x8EV[[\x81\x90P\x92\x91PPV[___`\xC0\x84\x86\x03\x12\x15a\x07\xC7Wa\x07\xC6a\x06\x08V[[_a\x07\xD4\x86\x82\x87\x01a\x07\x92V[\x93PP`\xA0\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xF5Wa\x07\xF4a\x06\x0CV[[a\x08\x01\x86\x82\x87\x01a\x06pV[\x92P\x92PP\x92P\x92P\x92V[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_a\x081\x82a\x08\rV[a\x08;\x81\x85a\x08\x17V[\x93Pa\x08K\x81\x85` \x86\x01a\x05\x92V[a\x08T\x81a\x05\xA0V[\x84\x01\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x08w\x81\x84a\x08'V[\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\x94Wa\x08\x93a\x06\x08V[[_a\x08\xA1\x84\x82\x85\x01a\x06PV[\x91PP\x92\x91PPV[a\x08\xB3\x81a\x076V[\x81\x14a\x08\xBDW__\xFD[PV[_\x815\x90Pa\x08\xCE\x81a\x08\xAAV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08\xE9Wa\x08\xE8a\x06\x08V[[_a\x08\xF6\x84\x82\x85\x01a\x08\xC0V[\x91PP\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\t\x13\x81a\x08\xFFV[\x82RPPV[_` \x82\x01\x90Pa\t,_\x83\x01\x84a\t\nV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\tLa\tG\x82a\x04\xBAV[a\t2V[\x82RPPV[_\x81``\x1B\x90P\x91\x90PV[_a\th\x82a\tRV[\x90P\x91\x90PV[_a\ty\x82a\t^V[\x90P\x91\x90PV[a\t\x91a\t\x8C\x82a\x05\nV[a\toV[\x82RPPV[_\x81\x90P\x92\x91PPV[\x82\x81\x837_\x83\x83\x01RPPPV[_a\t\xBA\x83\x85a\t\x97V[\x93Pa\t\xC7\x83\x85\x84a\t\xA1V[\x82\x84\x01\x90P\x93\x92PPPV[_a\t\xDE\x82\x87a\t;V[` \x82\x01\x91Pa\t\xEE\x82\x86a\t\x80V[`\x14\x82\x01\x91Pa\t\xFF\x82\x84\x86a\t\xAFV[\x91P\x81\x90P\x95\x94PPPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\nD\x82a\x04\xBAV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\nvWa\nua\n\rV[[`\x01\x82\x01\x90P\x91\x90PV[_a\n\x8C\x83\x85a\x08\x17V[\x93Pa\n\x99\x83\x85\x84a\t\xA1V[a\n\xA2\x83a\x05\xA0V[\x84\x01\x90P\x93\x92PPPV[_`@\x82\x01\x90Pa\n\xC0_\x83\x01\x86a\x05\x1BV[\x81\x81\x03` \x83\x01Ra\n\xD3\x81\x84\x86a\n\x81V[\x90P\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xA0\x05O;n\x0FG^\xCC\xE3,\x8D,\xE7\xFC\x05&\xB7\xA2\xA4\xE5\x87\x98\0)S\xC4\x08\x0C\xF3\xED\xD7dsolcC\0\x08\x1C\x003",
    );
    /**```solidity
struct Identifier { address origin; uint256 blockNumber; uint256 logIndex; uint256 timestamp; uint256 chainId; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Identifier {
        #[allow(missing_docs)]
        pub origin: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub blockNumber: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub logIndex: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub timestamp: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub chainId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Identifier> for UnderlyingRustTuple<'_> {
            fn from(value: Identifier) -> Self {
                (
                    value.origin,
                    value.blockNumber,
                    value.logIndex,
                    value.timestamp,
                    value.chainId,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Identifier {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    origin: tuple.0,
                    blockNumber: tuple.1,
                    logIndex: tuple.2,
                    timestamp: tuple.3,
                    chainId: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Identifier {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Identifier {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.origin,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.blockNumber),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.logIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.timestamp),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.chainId),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Identifier {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Identifier {
            const NAME: &'static str = "Identifier";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Identifier(address origin,uint256 blockNumber,uint256 logIndex,uint256 timestamp,uint256 chainId)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.origin,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.blockNumber)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.logIndex)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.timestamp)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.chainId)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Identifier {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.origin,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.blockNumber,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.logIndex,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.timestamp,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.chainId,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.origin,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.blockNumber,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.logIndex,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.timestamp,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.chainId,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `EventPayloadNotSentMessage()` and selector `0xdf1eb586`.
```solidity
error EventPayloadNotSentMessage();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EventPayloadNotSentMessage {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<EventPayloadNotSentMessage>
        for UnderlyingRustTuple<'_> {
            fn from(value: EventPayloadNotSentMessage) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for EventPayloadNotSentMessage {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for EventPayloadNotSentMessage {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EventPayloadNotSentMessage()";
            const SELECTOR: [u8; 4] = [223u8, 30u8, 181u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `IdOriginNotL2ToL2CrossDomainMessenger()` and selector `0x7987c157`.
```solidity
error IdOriginNotL2ToL2CrossDomainMessenger();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IdOriginNotL2ToL2CrossDomainMessenger {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<IdOriginNotL2ToL2CrossDomainMessenger>
        for UnderlyingRustTuple<'_> {
            fn from(value: IdOriginNotL2ToL2CrossDomainMessenger) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for IdOriginNotL2ToL2CrossDomainMessenger {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for IdOriginNotL2ToL2CrossDomainMessenger {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IdOriginNotL2ToL2CrossDomainMessenger()";
            const SELECTOR: [u8; 4] = [121u8, 135u8, 193u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidChainId()` and selector `0x7a47c9a2`.
```solidity
error InvalidChainId();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct InvalidChainId {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidChainId> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidChainId) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidChainId {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidChainId {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidChainId()";
            const SELECTOR: [u8; 4] = [122u8, 71u8, 201u8, 162u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MessageAlreadyRelayed()` and selector `0x9ca9480b`.
```solidity
error MessageAlreadyRelayed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MessageAlreadyRelayed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MessageAlreadyRelayed> for UnderlyingRustTuple<'_> {
            fn from(value: MessageAlreadyRelayed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MessageAlreadyRelayed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MessageAlreadyRelayed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MessageAlreadyRelayed()";
            const SELECTOR: [u8; 4] = [156u8, 169u8, 72u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MessageDestinationNotRelayChain()` and selector `0x31ac2211`.
```solidity
error MessageDestinationNotRelayChain();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MessageDestinationNotRelayChain {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MessageDestinationNotRelayChain>
        for UnderlyingRustTuple<'_> {
            fn from(value: MessageDestinationNotRelayChain) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for MessageDestinationNotRelayChain {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MessageDestinationNotRelayChain {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MessageDestinationNotRelayChain()";
            const SELECTOR: [u8; 4] = [49u8, 172u8, 34u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MessageDestinationSameChain()` and selector `0x8ed9a95d`.
```solidity
error MessageDestinationSameChain();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MessageDestinationSameChain {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MessageDestinationSameChain>
        for UnderlyingRustTuple<'_> {
            fn from(value: MessageDestinationSameChain) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for MessageDestinationSameChain {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MessageDestinationSameChain {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MessageDestinationSameChain()";
            const SELECTOR: [u8; 4] = [142u8, 217u8, 169u8, 93u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MessageTargetCrossL2Inbox()` and selector `0xa9040b12`.
```solidity
error MessageTargetCrossL2Inbox();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MessageTargetCrossL2Inbox {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MessageTargetCrossL2Inbox>
        for UnderlyingRustTuple<'_> {
            fn from(value: MessageTargetCrossL2Inbox) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for MessageTargetCrossL2Inbox {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MessageTargetCrossL2Inbox {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MessageTargetCrossL2Inbox()";
            const SELECTOR: [u8; 4] = [169u8, 4u8, 11u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MessageTargetL2ToL2CrossDomainMessenger()` and selector `0x4faa2509`.
```solidity
error MessageTargetL2ToL2CrossDomainMessenger();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MessageTargetL2ToL2CrossDomainMessenger {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MessageTargetL2ToL2CrossDomainMessenger>
        for UnderlyingRustTuple<'_> {
            fn from(value: MessageTargetL2ToL2CrossDomainMessenger) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for MessageTargetL2ToL2CrossDomainMessenger {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MessageTargetL2ToL2CrossDomainMessenger {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MessageTargetL2ToL2CrossDomainMessenger()";
            const SELECTOR: [u8; 4] = [79u8, 170u8, 37u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotEntered()` and selector `0xbca35af6`.
```solidity
error NotEntered();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NotEntered {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotEntered> for UnderlyingRustTuple<'_> {
            fn from(value: NotEntered) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotEntered {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotEntered {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotEntered()";
            const SELECTOR: [u8; 4] = [188u8, 163u8, 90u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ReentrantCall()` and selector `0x37ed32e8`.
```solidity
error ReentrantCall();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ReentrantCall {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReentrantCall> for UnderlyingRustTuple<'_> {
            fn from(value: ReentrantCall) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ReentrantCall {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReentrantCall {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReentrantCall()";
            const SELECTOR: [u8; 4] = [55u8, 237u8, 50u8, 232u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `TargetCallFailed()` and selector `0xeda86850`.
```solidity
error TargetCallFailed();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TargetCallFailed {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<TargetCallFailed> for UnderlyingRustTuple<'_> {
            fn from(value: TargetCallFailed) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for TargetCallFailed {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for TargetCallFailed {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "TargetCallFailed()";
            const SELECTOR: [u8; 4] = [237u8, 168u8, 104u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `RelayedMessage(uint256,uint256,bytes32)` and selector `0x5948076590932b9d173029c7df03fe386e755a61c86c7fe2671011a2faa2a379`.
```solidity
event RelayedMessage(uint256 indexed source, uint256 indexed messageNonce, bytes32 indexed messageHash);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct RelayedMessage {
        #[allow(missing_docs)]
        pub source: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub messageNonce: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub messageHash: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for RelayedMessage {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::FixedBytes<32>,
            );
            const SIGNATURE: &'static str = "RelayedMessage(uint256,uint256,bytes32)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                89u8,
                72u8,
                7u8,
                101u8,
                144u8,
                147u8,
                43u8,
                157u8,
                23u8,
                48u8,
                41u8,
                199u8,
                223u8,
                3u8,
                254u8,
                56u8,
                110u8,
                117u8,
                90u8,
                97u8,
                200u8,
                108u8,
                127u8,
                226u8,
                103u8,
                16u8,
                17u8,
                162u8,
                250u8,
                162u8,
                163u8,
                121u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    source: topics.1,
                    messageNonce: topics.2,
                    messageHash: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.source.clone(),
                    self.messageNonce.clone(),
                    self.messageHash.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.source);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.messageNonce);
                out[3usize] = <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.messageHash);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for RelayedMessage {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&RelayedMessage> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &RelayedMessage) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SentMessage(uint256,address,uint256,address,bytes)` and selector `0x382409ac69001e11931a28435afef442cbfd20d9891907e8fa373ba7d351f320`.
```solidity
event SentMessage(uint256 indexed destination, address indexed target, uint256 indexed messageNonce, address sender, bytes message);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SentMessage {
        #[allow(missing_docs)]
        pub destination: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub messageNonce: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub message: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SentMessage {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "SentMessage(uint256,address,uint256,address,bytes)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                56u8,
                36u8,
                9u8,
                172u8,
                105u8,
                0u8,
                30u8,
                17u8,
                147u8,
                26u8,
                40u8,
                67u8,
                90u8,
                254u8,
                244u8,
                66u8,
                203u8,
                253u8,
                32u8,
                217u8,
                137u8,
                25u8,
                7u8,
                232u8,
                250u8,
                55u8,
                59u8,
                167u8,
                211u8,
                81u8,
                243u8,
                32u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    destination: topics.1,
                    target: topics.2,
                    messageNonce: topics.3,
                    sender: data.0,
                    message: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.message,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.destination.clone(),
                    self.target.clone(),
                    self.messageNonce.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.destination);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.target,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.messageNonce);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SentMessage {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SentMessage> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SentMessage) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `__constructor__()` and selector `0x1c0082a3`.
```solidity
function __constructor__() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct __constructor__Call {}
    ///Container type for the return parameters of the [`__constructor__()`](__constructor__Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct __constructor__Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__constructor__Call> for UnderlyingRustTuple<'_> {
                fn from(value: __constructor__Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for __constructor__Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<__constructor__Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: __constructor__Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for __constructor__Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for __constructor__Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = __constructor__Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "__constructor__()";
            const SELECTOR: [u8; 4] = [28u8, 0u8, 130u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crossDomainMessageContext()` and selector `0x7936cbee`.
```solidity
function crossDomainMessageContext() external view returns (address sender_, uint256 source_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crossDomainMessageContextCall {}
    ///Container type for the return parameters of the [`crossDomainMessageContext()`](crossDomainMessageContextCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crossDomainMessageContextReturn {
        #[allow(missing_docs)]
        pub sender_: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub source_: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crossDomainMessageContextCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: crossDomainMessageContextCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crossDomainMessageContextCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crossDomainMessageContextReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crossDomainMessageContextReturn) -> Self {
                    (value.sender_, value.source_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crossDomainMessageContextReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sender_: tuple.0,
                        source_: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crossDomainMessageContextCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crossDomainMessageContextReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crossDomainMessageContext()";
            const SELECTOR: [u8; 4] = [121u8, 54u8, 203u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crossDomainMessageSender()` and selector `0x38ffde18`.
```solidity
function crossDomainMessageSender() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crossDomainMessageSenderCall {}
    ///Container type for the return parameters of the [`crossDomainMessageSender()`](crossDomainMessageSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crossDomainMessageSenderReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crossDomainMessageSenderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: crossDomainMessageSenderCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crossDomainMessageSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crossDomainMessageSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crossDomainMessageSenderReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crossDomainMessageSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crossDomainMessageSenderCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crossDomainMessageSenderReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crossDomainMessageSender()";
            const SELECTOR: [u8; 4] = [56u8, 255u8, 222u8, 24u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `crossDomainMessageSource()` and selector `0x24794462`.
```solidity
function crossDomainMessageSource() external view returns (uint256 source_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crossDomainMessageSourceCall {}
    ///Container type for the return parameters of the [`crossDomainMessageSource()`](crossDomainMessageSourceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct crossDomainMessageSourceReturn {
        #[allow(missing_docs)]
        pub source_: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crossDomainMessageSourceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: crossDomainMessageSourceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crossDomainMessageSourceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<crossDomainMessageSourceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: crossDomainMessageSourceReturn) -> Self {
                    (value.source_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for crossDomainMessageSourceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { source_: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for crossDomainMessageSourceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = crossDomainMessageSourceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "crossDomainMessageSource()";
            const SELECTOR: [u8; 4] = [36u8, 121u8, 68u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `messageNonce()` and selector `0xecc70428`.
```solidity
function messageNonce() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct messageNonceCall {}
    ///Container type for the return parameters of the [`messageNonce()`](messageNonceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct messageNonceReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<messageNonceCall> for UnderlyingRustTuple<'_> {
                fn from(value: messageNonceCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for messageNonceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<messageNonceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: messageNonceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for messageNonceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for messageNonceCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = messageNonceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "messageNonce()";
            const SELECTOR: [u8; 4] = [236u8, 199u8, 4u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `messageVersion()` and selector `0x52617f3c`.
```solidity
function messageVersion() external view returns (uint16);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct messageVersionCall {}
    ///Container type for the return parameters of the [`messageVersion()`](messageVersionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct messageVersionReturn {
        #[allow(missing_docs)]
        pub _0: u16,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<messageVersionCall> for UnderlyingRustTuple<'_> {
                fn from(value: messageVersionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for messageVersionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u16,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<messageVersionReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: messageVersionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for messageVersionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for messageVersionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = messageVersionReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<16>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "messageVersion()";
            const SELECTOR: [u8; 4] = [82u8, 97u8, 127u8, 60u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `relayMessage((address,uint256,uint256,uint256,uint256),bytes)` and selector `0x8d1d298f`.
```solidity
function relayMessage(Identifier memory _id, bytes memory _sentMessage) external payable returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct relayMessageCall {
        #[allow(missing_docs)]
        pub _id: <Identifier as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub _sentMessage: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`relayMessage((address,uint256,uint256,uint256,uint256),bytes)`](relayMessageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct relayMessageReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                Identifier,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Identifier as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<relayMessageCall> for UnderlyingRustTuple<'_> {
                fn from(value: relayMessageCall) -> Self {
                    (value._id, value._sentMessage)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for relayMessageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _id: tuple.0,
                        _sentMessage: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<relayMessageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: relayMessageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for relayMessageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for relayMessageCall {
            type Parameters<'a> = (Identifier, alloy::sol_types::sol_data::Bytes);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = relayMessageReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "relayMessage((address,uint256,uint256,uint256,uint256),bytes)";
            const SELECTOR: [u8; 4] = [141u8, 29u8, 41u8, 143u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <Identifier as alloy_sol_types::SolType>::tokenize(&self._id),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._sentMessage,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sendMessage(uint256,address,bytes)` and selector `0x7056f41f`.
```solidity
function sendMessage(uint256 _targetChainId, address _target, bytes memory _message) external returns (bytes32);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendMessageCall {
        #[allow(missing_docs)]
        pub _targetChainId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _target: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _message: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`sendMessage(uint256,address,bytes)`](sendMessageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sendMessageReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendMessageCall> for UnderlyingRustTuple<'_> {
                fn from(value: sendMessageCall) -> Self {
                    (value._targetChainId, value._target, value._message)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sendMessageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _targetChainId: tuple.0,
                        _target: tuple.1,
                        _message: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sendMessageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: sendMessageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sendMessageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sendMessageCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sendMessageReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sendMessage(uint256,address,bytes)";
            const SELECTOR: [u8; 4] = [112u8, 86u8, 244u8, 31u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._targetChainId),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._target,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._message,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setCrossDomainMessageSender(address)` and selector `0x98c36301`.
```solidity
function setCrossDomainMessageSender(address sender) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCrossDomainMessageSenderCall {
        #[allow(missing_docs)]
        pub sender: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setCrossDomainMessageSender(address)`](setCrossDomainMessageSenderCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setCrossDomainMessageSenderReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCrossDomainMessageSenderCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setCrossDomainMessageSenderCall) -> Self {
                    (value.sender,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setCrossDomainMessageSenderCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { sender: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setCrossDomainMessageSenderReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setCrossDomainMessageSenderReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setCrossDomainMessageSenderReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setCrossDomainMessageSenderCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setCrossDomainMessageSenderReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setCrossDomainMessageSender(address)";
            const SELECTOR: [u8; 4] = [152u8, 195u8, 99u8, 1u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `successfulMessages(bytes32)` and selector `0xb1b1b209`.
```solidity
function successfulMessages(bytes32 msgHash) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct successfulMessagesCall {
        #[allow(missing_docs)]
        pub msgHash: alloy::sol_types::private::FixedBytes<32>,
    }
    ///Container type for the return parameters of the [`successfulMessages(bytes32)`](successfulMessagesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct successfulMessagesReturn {
        #[allow(missing_docs)]
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<32>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<successfulMessagesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: successfulMessagesCall) -> Self {
                    (value.msgHash,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for successfulMessagesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { msgHash: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<successfulMessagesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: successfulMessagesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for successfulMessagesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for successfulMessagesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<32>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = successfulMessagesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "successfulMessages(bytes32)";
            const SELECTOR: [u8; 4] = [177u8, 177u8, 178u8, 9u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.msgHash),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `version()` and selector `0x54fd4d50`.
```solidity
function version() external pure returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct versionCall {}
    ///Container type for the return parameters of the [`version()`](versionCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct versionReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<versionCall> for UnderlyingRustTuple<'_> {
                fn from(value: versionCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for versionCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<versionReturn> for UnderlyingRustTuple<'_> {
                fn from(value: versionReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for versionReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for versionCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = versionReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "version()";
            const SELECTOR: [u8; 4] = [84u8, 253u8, 77u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`MockMessenger`](self) function calls.
    pub enum MockMessengerCalls {
        #[allow(missing_docs)]
        __constructor__(__constructor__Call),
        #[allow(missing_docs)]
        crossDomainMessageContext(crossDomainMessageContextCall),
        #[allow(missing_docs)]
        crossDomainMessageSender(crossDomainMessageSenderCall),
        #[allow(missing_docs)]
        crossDomainMessageSource(crossDomainMessageSourceCall),
        #[allow(missing_docs)]
        messageNonce(messageNonceCall),
        #[allow(missing_docs)]
        messageVersion(messageVersionCall),
        #[allow(missing_docs)]
        relayMessage(relayMessageCall),
        #[allow(missing_docs)]
        sendMessage(sendMessageCall),
        #[allow(missing_docs)]
        setCrossDomainMessageSender(setCrossDomainMessageSenderCall),
        #[allow(missing_docs)]
        successfulMessages(successfulMessagesCall),
        #[allow(missing_docs)]
        version(versionCall),
    }
    #[automatically_derived]
    impl MockMessengerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [28u8, 0u8, 130u8, 163u8],
            [36u8, 121u8, 68u8, 98u8],
            [56u8, 255u8, 222u8, 24u8],
            [82u8, 97u8, 127u8, 60u8],
            [84u8, 253u8, 77u8, 80u8],
            [112u8, 86u8, 244u8, 31u8],
            [121u8, 54u8, 203u8, 238u8],
            [141u8, 29u8, 41u8, 143u8],
            [152u8, 195u8, 99u8, 1u8],
            [177u8, 177u8, 178u8, 9u8],
            [236u8, 199u8, 4u8, 40u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockMessengerCalls {
        const NAME: &'static str = "MockMessengerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::__constructor__(_) => {
                    <__constructor__Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crossDomainMessageContext(_) => {
                    <crossDomainMessageContextCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crossDomainMessageSender(_) => {
                    <crossDomainMessageSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::crossDomainMessageSource(_) => {
                    <crossDomainMessageSourceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::messageNonce(_) => {
                    <messageNonceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::messageVersion(_) => {
                    <messageVersionCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::relayMessage(_) => {
                    <relayMessageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sendMessage(_) => {
                    <sendMessageCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setCrossDomainMessageSender(_) => {
                    <setCrossDomainMessageSenderCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::successfulMessages(_) => {
                    <successfulMessagesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::version(_) => <versionCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockMessengerCalls>] = &[
                {
                    fn __constructor__(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <__constructor__Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::__constructor__)
                    }
                    __constructor__
                },
                {
                    fn crossDomainMessageSource(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <crossDomainMessageSourceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::crossDomainMessageSource)
                    }
                    crossDomainMessageSource
                },
                {
                    fn crossDomainMessageSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <crossDomainMessageSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::crossDomainMessageSender)
                    }
                    crossDomainMessageSender
                },
                {
                    fn messageVersion(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <messageVersionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::messageVersion)
                    }
                    messageVersion
                },
                {
                    fn version(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <versionCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::version)
                    }
                    version
                },
                {
                    fn sendMessage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <sendMessageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::sendMessage)
                    }
                    sendMessage
                },
                {
                    fn crossDomainMessageContext(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <crossDomainMessageContextCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::crossDomainMessageContext)
                    }
                    crossDomainMessageContext
                },
                {
                    fn relayMessage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <relayMessageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::relayMessage)
                    }
                    relayMessage
                },
                {
                    fn setCrossDomainMessageSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <setCrossDomainMessageSenderCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::setCrossDomainMessageSender)
                    }
                    setCrossDomainMessageSender
                },
                {
                    fn successfulMessages(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <successfulMessagesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::successfulMessages)
                    }
                    successfulMessages
                },
                {
                    fn messageNonce(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerCalls> {
                        <messageNonceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerCalls::messageNonce)
                    }
                    messageNonce
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::__constructor__(inner) => {
                    <__constructor__Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crossDomainMessageContext(inner) => {
                    <crossDomainMessageContextCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crossDomainMessageSender(inner) => {
                    <crossDomainMessageSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::crossDomainMessageSource(inner) => {
                    <crossDomainMessageSourceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::messageNonce(inner) => {
                    <messageNonceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::messageVersion(inner) => {
                    <messageVersionCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::relayMessage(inner) => {
                    <relayMessageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sendMessage(inner) => {
                    <sendMessageCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setCrossDomainMessageSender(inner) => {
                    <setCrossDomainMessageSenderCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::successfulMessages(inner) => {
                    <successfulMessagesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::version(inner) => {
                    <versionCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::__constructor__(inner) => {
                    <__constructor__Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crossDomainMessageContext(inner) => {
                    <crossDomainMessageContextCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crossDomainMessageSender(inner) => {
                    <crossDomainMessageSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::crossDomainMessageSource(inner) => {
                    <crossDomainMessageSourceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::messageNonce(inner) => {
                    <messageNonceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::messageVersion(inner) => {
                    <messageVersionCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::relayMessage(inner) => {
                    <relayMessageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sendMessage(inner) => {
                    <sendMessageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setCrossDomainMessageSender(inner) => {
                    <setCrossDomainMessageSenderCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::successfulMessages(inner) => {
                    <successfulMessagesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::version(inner) => {
                    <versionCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`MockMessenger`](self) custom errors.
    pub enum MockMessengerErrors {
        #[allow(missing_docs)]
        EventPayloadNotSentMessage(EventPayloadNotSentMessage),
        #[allow(missing_docs)]
        IdOriginNotL2ToL2CrossDomainMessenger(IdOriginNotL2ToL2CrossDomainMessenger),
        #[allow(missing_docs)]
        InvalidChainId(InvalidChainId),
        #[allow(missing_docs)]
        MessageAlreadyRelayed(MessageAlreadyRelayed),
        #[allow(missing_docs)]
        MessageDestinationNotRelayChain(MessageDestinationNotRelayChain),
        #[allow(missing_docs)]
        MessageDestinationSameChain(MessageDestinationSameChain),
        #[allow(missing_docs)]
        MessageTargetCrossL2Inbox(MessageTargetCrossL2Inbox),
        #[allow(missing_docs)]
        MessageTargetL2ToL2CrossDomainMessenger(MessageTargetL2ToL2CrossDomainMessenger),
        #[allow(missing_docs)]
        NotEntered(NotEntered),
        #[allow(missing_docs)]
        ReentrantCall(ReentrantCall),
        #[allow(missing_docs)]
        TargetCallFailed(TargetCallFailed),
    }
    #[automatically_derived]
    impl MockMessengerErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [49u8, 172u8, 34u8, 17u8],
            [55u8, 237u8, 50u8, 232u8],
            [79u8, 170u8, 37u8, 9u8],
            [121u8, 135u8, 193u8, 87u8],
            [122u8, 71u8, 201u8, 162u8],
            [142u8, 217u8, 169u8, 93u8],
            [156u8, 169u8, 72u8, 11u8],
            [169u8, 4u8, 11u8, 18u8],
            [188u8, 163u8, 90u8, 246u8],
            [223u8, 30u8, 181u8, 134u8],
            [237u8, 168u8, 104u8, 80u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for MockMessengerErrors {
        const NAME: &'static str = "MockMessengerErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::EventPayloadNotSentMessage(_) => {
                    <EventPayloadNotSentMessage as alloy_sol_types::SolError>::SELECTOR
                }
                Self::IdOriginNotL2ToL2CrossDomainMessenger(_) => {
                    <IdOriginNotL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidChainId(_) => {
                    <InvalidChainId as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MessageAlreadyRelayed(_) => {
                    <MessageAlreadyRelayed as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MessageDestinationNotRelayChain(_) => {
                    <MessageDestinationNotRelayChain as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MessageDestinationSameChain(_) => {
                    <MessageDestinationSameChain as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MessageTargetCrossL2Inbox(_) => {
                    <MessageTargetCrossL2Inbox as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MessageTargetL2ToL2CrossDomainMessenger(_) => {
                    <MessageTargetL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotEntered(_) => {
                    <NotEntered as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ReentrantCall(_) => {
                    <ReentrantCall as alloy_sol_types::SolError>::SELECTOR
                }
                Self::TargetCallFailed(_) => {
                    <TargetCallFailed as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<MockMessengerErrors>] = &[
                {
                    fn MessageDestinationNotRelayChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <MessageDestinationNotRelayChain as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::MessageDestinationNotRelayChain)
                    }
                    MessageDestinationNotRelayChain
                },
                {
                    fn ReentrantCall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <ReentrantCall as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::ReentrantCall)
                    }
                    ReentrantCall
                },
                {
                    fn MessageTargetL2ToL2CrossDomainMessenger(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <MessageTargetL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MockMessengerErrors::MessageTargetL2ToL2CrossDomainMessenger,
                            )
                    }
                    MessageTargetL2ToL2CrossDomainMessenger
                },
                {
                    fn IdOriginNotL2ToL2CrossDomainMessenger(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <IdOriginNotL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                MockMessengerErrors::IdOriginNotL2ToL2CrossDomainMessenger,
                            )
                    }
                    IdOriginNotL2ToL2CrossDomainMessenger
                },
                {
                    fn InvalidChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <InvalidChainId as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::InvalidChainId)
                    }
                    InvalidChainId
                },
                {
                    fn MessageDestinationSameChain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <MessageDestinationSameChain as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::MessageDestinationSameChain)
                    }
                    MessageDestinationSameChain
                },
                {
                    fn MessageAlreadyRelayed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <MessageAlreadyRelayed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::MessageAlreadyRelayed)
                    }
                    MessageAlreadyRelayed
                },
                {
                    fn MessageTargetCrossL2Inbox(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <MessageTargetCrossL2Inbox as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::MessageTargetCrossL2Inbox)
                    }
                    MessageTargetCrossL2Inbox
                },
                {
                    fn NotEntered(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <NotEntered as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::NotEntered)
                    }
                    NotEntered
                },
                {
                    fn EventPayloadNotSentMessage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <EventPayloadNotSentMessage as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::EventPayloadNotSentMessage)
                    }
                    EventPayloadNotSentMessage
                },
                {
                    fn TargetCallFailed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<MockMessengerErrors> {
                        <TargetCallFailed as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(MockMessengerErrors::TargetCallFailed)
                    }
                    TargetCallFailed
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::EventPayloadNotSentMessage(inner) => {
                    <EventPayloadNotSentMessage as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::IdOriginNotL2ToL2CrossDomainMessenger(inner) => {
                    <IdOriginNotL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidChainId(inner) => {
                    <InvalidChainId as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MessageAlreadyRelayed(inner) => {
                    <MessageAlreadyRelayed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MessageDestinationNotRelayChain(inner) => {
                    <MessageDestinationNotRelayChain as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MessageDestinationSameChain(inner) => {
                    <MessageDestinationSameChain as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MessageTargetCrossL2Inbox(inner) => {
                    <MessageTargetCrossL2Inbox as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::MessageTargetL2ToL2CrossDomainMessenger(inner) => {
                    <MessageTargetL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NotEntered(inner) => {
                    <NotEntered as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ReentrantCall(inner) => {
                    <ReentrantCall as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::TargetCallFailed(inner) => {
                    <TargetCallFailed as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::EventPayloadNotSentMessage(inner) => {
                    <EventPayloadNotSentMessage as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::IdOriginNotL2ToL2CrossDomainMessenger(inner) => {
                    <IdOriginNotL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidChainId(inner) => {
                    <InvalidChainId as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MessageAlreadyRelayed(inner) => {
                    <MessageAlreadyRelayed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MessageDestinationNotRelayChain(inner) => {
                    <MessageDestinationNotRelayChain as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MessageDestinationSameChain(inner) => {
                    <MessageDestinationSameChain as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MessageTargetCrossL2Inbox(inner) => {
                    <MessageTargetCrossL2Inbox as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MessageTargetL2ToL2CrossDomainMessenger(inner) => {
                    <MessageTargetL2ToL2CrossDomainMessenger as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotEntered(inner) => {
                    <NotEntered as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ReentrantCall(inner) => {
                    <ReentrantCall as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::TargetCallFailed(inner) => {
                    <TargetCallFailed as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`MockMessenger`](self) events.
    pub enum MockMessengerEvents {
        #[allow(missing_docs)]
        RelayedMessage(RelayedMessage),
        #[allow(missing_docs)]
        SentMessage(SentMessage),
    }
    #[automatically_derived]
    impl MockMessengerEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                56u8,
                36u8,
                9u8,
                172u8,
                105u8,
                0u8,
                30u8,
                17u8,
                147u8,
                26u8,
                40u8,
                67u8,
                90u8,
                254u8,
                244u8,
                66u8,
                203u8,
                253u8,
                32u8,
                217u8,
                137u8,
                25u8,
                7u8,
                232u8,
                250u8,
                55u8,
                59u8,
                167u8,
                211u8,
                81u8,
                243u8,
                32u8,
            ],
            [
                89u8,
                72u8,
                7u8,
                101u8,
                144u8,
                147u8,
                43u8,
                157u8,
                23u8,
                48u8,
                41u8,
                199u8,
                223u8,
                3u8,
                254u8,
                56u8,
                110u8,
                117u8,
                90u8,
                97u8,
                200u8,
                108u8,
                127u8,
                226u8,
                103u8,
                16u8,
                17u8,
                162u8,
                250u8,
                162u8,
                163u8,
                121u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for MockMessengerEvents {
        const NAME: &'static str = "MockMessengerEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<RelayedMessage as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <RelayedMessage as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::RelayedMessage)
                }
                Some(<SentMessage as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <SentMessage as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SentMessage)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for MockMessengerEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::RelayedMessage(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SentMessage(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::RelayedMessage(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SentMessage(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`MockMessenger`](self) contract instance.

See the [wrapper's documentation](`MockMessengerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> MockMessengerInstance<T, P, N> {
        MockMessengerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<MockMessengerInstance<T, P, N>>,
    > {
        MockMessengerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        MockMessengerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`MockMessenger`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`MockMessenger`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct MockMessengerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for MockMessengerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("MockMessengerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMessengerInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`MockMessenger`](self) contract instance.

See the [wrapper's documentation](`MockMessengerInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<MockMessengerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> MockMessengerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> MockMessengerInstance<T, P, N> {
            MockMessengerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMessengerInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`__constructor__`] function.
        pub fn __constructor__(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, __constructor__Call, N> {
            self.call_builder(&__constructor__Call {})
        }
        ///Creates a new call builder for the [`crossDomainMessageContext`] function.
        pub fn crossDomainMessageContext(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, crossDomainMessageContextCall, N> {
            self.call_builder(&crossDomainMessageContextCall {})
        }
        ///Creates a new call builder for the [`crossDomainMessageSender`] function.
        pub fn crossDomainMessageSender(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, crossDomainMessageSenderCall, N> {
            self.call_builder(&crossDomainMessageSenderCall {})
        }
        ///Creates a new call builder for the [`crossDomainMessageSource`] function.
        pub fn crossDomainMessageSource(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, crossDomainMessageSourceCall, N> {
            self.call_builder(&crossDomainMessageSourceCall {})
        }
        ///Creates a new call builder for the [`messageNonce`] function.
        pub fn messageNonce(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, messageNonceCall, N> {
            self.call_builder(&messageNonceCall {})
        }
        ///Creates a new call builder for the [`messageVersion`] function.
        pub fn messageVersion(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, messageVersionCall, N> {
            self.call_builder(&messageVersionCall {})
        }
        ///Creates a new call builder for the [`relayMessage`] function.
        pub fn relayMessage(
            &self,
            _id: <Identifier as alloy::sol_types::SolType>::RustType,
            _sentMessage: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, relayMessageCall, N> {
            self.call_builder(
                &relayMessageCall {
                    _id,
                    _sentMessage,
                },
            )
        }
        ///Creates a new call builder for the [`sendMessage`] function.
        pub fn sendMessage(
            &self,
            _targetChainId: alloy::sol_types::private::primitives::aliases::U256,
            _target: alloy::sol_types::private::Address,
            _message: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, sendMessageCall, N> {
            self.call_builder(
                &sendMessageCall {
                    _targetChainId,
                    _target,
                    _message,
                },
            )
        }
        ///Creates a new call builder for the [`setCrossDomainMessageSender`] function.
        pub fn setCrossDomainMessageSender(
            &self,
            sender: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setCrossDomainMessageSenderCall, N> {
            self.call_builder(
                &setCrossDomainMessageSenderCall {
                    sender,
                },
            )
        }
        ///Creates a new call builder for the [`successfulMessages`] function.
        pub fn successfulMessages(
            &self,
            msgHash: alloy::sol_types::private::FixedBytes<32>,
        ) -> alloy_contract::SolCallBuilder<T, &P, successfulMessagesCall, N> {
            self.call_builder(&successfulMessagesCall { msgHash })
        }
        ///Creates a new call builder for the [`version`] function.
        pub fn version(&self) -> alloy_contract::SolCallBuilder<T, &P, versionCall, N> {
            self.call_builder(&versionCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > MockMessengerInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`RelayedMessage`] event.
        pub fn RelayedMessage_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, RelayedMessage, N> {
            self.event_filter::<RelayedMessage>()
        }
        ///Creates a new event filter for the [`SentMessage`] event.
        pub fn SentMessage_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SentMessage, N> {
            self.event_filter::<SentMessage>()
        }
    }
}
